{"uid":"1cc1dc95edfd9087","name":"test_search_flights_1_stop_2___DEL____JFK____25_05_2024____1_Stop__","fullName":"testcases.test_searchflights.TestSearchAndVerifyFilter#test_search_flights_1_stop_2___DEL____JFK____25_05_2024____1_Stop__","historyId":"3781ce1fd0a25de5feef610905320f32","time":{"start":1713209914524,"stop":1713210001595,"duration":87071},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=123.0.6312.123)\nStacktrace:\n0   chromedriver                        0x000000010517a0c8 chromedriver + 4595912\n1   chromedriver                        0x0000000105171e33 chromedriver + 4562483\n2   chromedriver                        0x0000000104d75225 chromedriver + 381477\n3   chromedriver                        0x0000000104dc01ed chromedriver + 688621\n4   chromedriver                        0x0000000104db390c chromedriver + 637196\n5   chromedriver                        0x0000000104de1142 chromedriver + 823618\n6   chromedriver                        0x0000000104db32b8 chromedriver + 635576\n7   chromedriver                        0x0000000104de12fe chromedriver + 824062\n8   chromedriver                        0x0000000104e0114d chromedriver + 954701\n9   chromedriver                        0x0000000104de0ee3 chromedriver + 823011\n10  chromedriver                        0x0000000104db1be4 chromedriver + 629732\n11  chromedriver                        0x0000000104db279e chromedriver + 632734\n12  chromedriver                        0x000000010513ffe2 chromedriver + 4358114\n13  chromedriver                        0x0000000105144c2d chromedriver + 4377645\n14  chromedriver                        0x00000001051445a3 chromedriver + 4375971\n15  chromedriver                        0x0000000105144ed5 chromedriver + 4378325\n16  chromedriver                        0x0000000105129a05 chromedriver + 4266501\n17  chromedriver                        0x000000010514525d chromedriver + 4379229\n18  chromedriver                        0x000000010511c050 chromedriver + 4210768\n19  chromedriver                        0x0000000105162a98 chromedriver + 4500120\n20  chromedriver                        0x0000000105162c11 chromedriver + 4500497\n21  chromedriver                        0x0000000105171a73 chromedriver + 4561523\n22  libsystem_pthread.dylib             0x00007ff816bfb18b _pthread_start + 99\n23  libsystem_pthread.dylib             0x00007ff816bf6ae3 thread_start + 15","statusTrace":"self = <testcases.test_searchflights.TestSearchAndVerifyFilter testMethod=test_search_flights_1_stop_2___DEL____JFK____25_05_2024____1_Stop__>, goingfrom = 'DEL', goingto = 'JFK'\ndate = '25/05/2024', stops = '1 Stop'\n\n    @data(*Utils.read_data_from_csv(\"/Users/k-bhatt/PythonTestFrameworkDemo/testdata/tdatacsv.csv\"))\n    @unpack\n    def test_search_flights_1_stop(self,goingfrom, goingto, date, stops):\n        # Provide going from location\n        search_flight_result =  self.launchPage.searchFlights(goingfrom, goingto, date)\n    \n        # To handle dynamic scroll\n        # self.launchPage.page_scroll()\n        self.launchPage.wait_for_loading_indicator()\n        # self.launchPage.page_scroll_to_bottom()\n        self.launchPage.page_scroll()\n    \n        # Select the filter 1 stop\n>       search_flight_result.filter_flights_by_stop(stops)\n\ntestcases/test_searchflights.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/search_flights_results_page.py:33: in filter_flights_by_stop\n    self.get_filter_by_one_stop_icon().click()\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10ef83f10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...7ff816bfb18b _pthread_start + 99\\\\n23  libsystem_pthread.dylib             0x00007ff816bf6ae3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=123.0.6312.123)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010517a0c8 chromedriver + 4595912\nE       1   chromedriver                        0x0000000105171e33 chromedriver + 4562483\nE       2   chromedriver                        0x0000000104d75225 chromedriver + 381477\nE       3   chromedriver                        0x0000000104dc01ed chromedriver + 688621\nE       4   chromedriver                        0x0000000104db390c chromedriver + 637196\nE       5   chromedriver                        0x0000000104de1142 chromedriver + 823618\nE       6   chromedriver                        0x0000000104db32b8 chromedriver + 635576\nE       7   chromedriver                        0x0000000104de12fe chromedriver + 824062\nE       8   chromedriver                        0x0000000104e0114d chromedriver + 954701\nE       9   chromedriver                        0x0000000104de0ee3 chromedriver + 823011\nE       10  chromedriver                        0x0000000104db1be4 chromedriver + 629732\nE       11  chromedriver                        0x0000000104db279e chromedriver + 632734\nE       12  chromedriver                        0x000000010513ffe2 chromedriver + 4358114\nE       13  chromedriver                        0x0000000105144c2d chromedriver + 4377645\nE       14  chromedriver                        0x00000001051445a3 chromedriver + 4375971\nE       15  chromedriver                        0x0000000105144ed5 chromedriver + 4378325\nE       16  chromedriver                        0x0000000105129a05 chromedriver + 4266501\nE       17  chromedriver                        0x000000010514525d chromedriver + 4379229\nE       18  chromedriver                        0x000000010511c050 chromedriver + 4210768\nE       19  chromedriver                        0x0000000105162a98 chromedriver + 4500120\nE       20  chromedriver                        0x0000000105162c11 chromedriver + 4500497\nE       21  chromedriver                        0x0000000105171a73 chromedriver + 4561523\nE       22  libsystem_pthread.dylib             0x00007ff816bfb18b _pthread_start + 99\nE       23  libsystem_pthread.dylib             0x00007ff816bf6ae3 thread_start + 15\n\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestSearchAndVerifyFilter","time":{"start":1713209896110,"stop":1713209896110,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1713209896110,"stop":1713209896110,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"url","time":{"start":1713209896110,"stop":1713209896110,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1713209909678,"stop":1713209914523,"duration":4845},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"class_setup","time":{"start":1713209914523,"stop":1713209914523,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=123.0.6312.123)\nStacktrace:\n0   chromedriver                        0x000000010517a0c8 chromedriver + 4595912\n1   chromedriver                        0x0000000105171e33 chromedriver + 4562483\n2   chromedriver                        0x0000000104d75225 chromedriver + 381477\n3   chromedriver                        0x0000000104dc01ed chromedriver + 688621\n4   chromedriver                        0x0000000104db390c chromedriver + 637196\n5   chromedriver                        0x0000000104de1142 chromedriver + 823618\n6   chromedriver                        0x0000000104db32b8 chromedriver + 635576\n7   chromedriver                        0x0000000104de12fe chromedriver + 824062\n8   chromedriver                        0x0000000104e0114d chromedriver + 954701\n9   chromedriver                        0x0000000104de0ee3 chromedriver + 823011\n10  chromedriver                        0x0000000104db1be4 chromedriver + 629732\n11  chromedriver                        0x0000000104db279e chromedriver + 632734\n12  chromedriver                        0x000000010513ffe2 chromedriver + 4358114\n13  chromedriver                        0x0000000105144c2d chromedriver + 4377645\n14  chromedriver                        0x00000001051445a3 chromedriver + 4375971\n15  chromedriver                        0x0000000105144ed5 chromedriver + 4378325\n16  chromedriver                        0x0000000105129a05 chromedriver + 4266501\n17  chromedriver                        0x000000010514525d chromedriver + 4379229\n18  chromedriver                        0x000000010511c050 chromedriver + 4210768\n19  chromedriver                        0x0000000105162a98 chromedriver + 4500120\n20  chromedriver                        0x0000000105162c11 chromedriver + 4500497\n21  chromedriver                        0x0000000105171a73 chromedriver + 4561523\n22  libsystem_pthread.dylib             0x00007ff816bfb18b _pthread_start + 99\n23  libsystem_pthread.dylib             0x00007ff816bf6ae3 thread_start + 15","statusTrace":"self = <testcases.test_searchflights.TestSearchAndVerifyFilter testMethod=test_search_flights_1_stop_2___DEL____JFK____25_05_2024____1_Stop__>, goingfrom = 'DEL', goingto = 'JFK'\ndate = '25/05/2024', stops = '1 Stop'\n\n    @data(*Utils.read_data_from_csv(\"/Users/k-bhatt/PythonTestFrameworkDemo/testdata/tdatacsv.csv\"))\n    @unpack\n    def test_search_flights_1_stop(self,goingfrom, goingto, date, stops):\n        # Provide going from location\n        search_flight_result =  self.launchPage.searchFlights(goingfrom, goingto, date)\n    \n        # To handle dynamic scroll\n        # self.launchPage.page_scroll()\n        self.launchPage.wait_for_loading_indicator()\n        # self.launchPage.page_scroll_to_bottom()\n        self.launchPage.page_scroll()\n    \n        # Select the filter 1 stop\n>       search_flight_result.filter_flights_by_stop(stops)\n\ntestcases/test_searchflights.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/search_flights_results_page.py:33: in filter_flights_by_stop\n    self.get_filter_by_one_stop_icon().click()\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10ef83f10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...7ff816bfb18b _pthread_start + 99\\\\n23  libsystem_pthread.dylib             0x00007ff816bf6ae3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=123.0.6312.123)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010517a0c8 chromedriver + 4595912\nE       1   chromedriver                        0x0000000105171e33 chromedriver + 4562483\nE       2   chromedriver                        0x0000000104d75225 chromedriver + 381477\nE       3   chromedriver                        0x0000000104dc01ed chromedriver + 688621\nE       4   chromedriver                        0x0000000104db390c chromedriver + 637196\nE       5   chromedriver                        0x0000000104de1142 chromedriver + 823618\nE       6   chromedriver                        0x0000000104db32b8 chromedriver + 635576\nE       7   chromedriver                        0x0000000104de12fe chromedriver + 824062\nE       8   chromedriver                        0x0000000104e0114d chromedriver + 954701\nE       9   chromedriver                        0x0000000104de0ee3 chromedriver + 823011\nE       10  chromedriver                        0x0000000104db1be4 chromedriver + 629732\nE       11  chromedriver                        0x0000000104db279e chromedriver + 632734\nE       12  chromedriver                        0x000000010513ffe2 chromedriver + 4358114\nE       13  chromedriver                        0x0000000105144c2d chromedriver + 4377645\nE       14  chromedriver                        0x00000001051445a3 chromedriver + 4375971\nE       15  chromedriver                        0x0000000105144ed5 chromedriver + 4378325\nE       16  chromedriver                        0x0000000105129a05 chromedriver + 4266501\nE       17  chromedriver                        0x000000010514525d chromedriver + 4379229\nE       18  chromedriver                        0x000000010511c050 chromedriver + 4210768\nE       19  chromedriver                        0x0000000105162a98 chromedriver + 4500120\nE       20  chromedriver                        0x0000000105162c11 chromedriver + 4500497\nE       21  chromedriver                        0x0000000105171a73 chromedriver + 4561523\nE       22  libsystem_pthread.dylib             0x00007ff816bfb18b _pthread_start + 99\nE       23  libsystem_pthread.dylib             0x00007ff816bf6ae3 thread_start + 15\n\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[],"attachments":[{"uid":"c2f9454772f97e25","name":"Screenshot on failure","source":"c2f9454772f97e25.png","type":"image/png","size":184993},{"uid":"21d3b7522ffc6b98","name":"log","source":"21d3b7522ffc6b98.txt","type":"text/plain","size":157}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1713210001795,"stop":1713210001917,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_unittest_setUpClass_fixture_TestSearchAndVerifyFilter::0","time":{"start":1713210064675,"stop":1713210064675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_searchflights"},{"name":"subSuite","value":"TestSearchAndVerifyFilter"},{"name":"host","value":"PC2368"},{"name":"thread","value":"16948-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_searchflights"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a19364823aa881fb","status":"broken","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=123.0.6312.123)\nStacktrace:\n0   chromedriver                        0x0000000108cbf0c8 chromedriver + 4595912\n1   chromedriver                        0x0000000108cb6e33 chromedriver + 4562483\n2   chromedriver                        0x00000001088ba225 chromedriver + 381477\n3   chromedriver                        0x00000001089051ed chromedriver + 688621\n4   chromedriver                        0x00000001088f890c chromedriver + 637196\n5   chromedriver                        0x0000000108926142 chromedriver + 823618\n6   chromedriver                        0x00000001088f82b8 chromedriver + 635576\n7   chromedriver                        0x00000001089262fe chromedriver + 824062\n8   chromedriver                        0x000000010894614d chromedriver + 954701\n9   chromedriver                        0x0000000108925ee3 chromedriver + 823011\n10  chromedriver                        0x00000001088f6be4 chromedriver + 629732\n11  chromedriver                        0x00000001088f779e chromedriver + 632734\n12  chromedriver                        0x0000000108c84fe2 chromedriver + 4358114\n13  chromedriver                        0x0000000108c89c2d chromedriver + 4377645\n14  chromedriver                        0x0000000108c895a3 chromedriver + 4375971\n15  chromedriver                        0x0000000108c89ed5 chromedriver + 4378325\n16  chromedriver                        0x0000000108c6ea05 chromedriver + 4266501\n17  chromedriver                        0x0000000108c8a25d chromedriver + 4379229\n18  chromedriver                        0x0000000108c61050 chromedriver + 4210768\n19  chromedriver                        0x0000000108ca7a98 chromedriver + 4500120\n20  chromedriver                        0x0000000108ca7c11 chromedriver + 4500497\n21  chromedriver                        0x0000000108cb6a73 chromedriver + 4561523\n22  libsystem_pthread.dylib             0x00007ff816bfb18b _pthread_start + 99\n23  libsystem_pthread.dylib             0x00007ff816bf6ae3 thread_start + 15","time":{"start":1713142842224,"stop":1713142930070,"duration":87846}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('setup')"]},"source":"1cc1dc95edfd9087.json","parameterValues":[]}